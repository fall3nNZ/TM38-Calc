{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":["file:///Users/daviddarlow/Documents/GitHub/TM38-Calc/app/page.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport React, { useState, useMemo, useEffect, Suspense } from 'react';\nimport dynamic from 'next/dynamic';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { HelpCircle, AlertTriangle, ArrowLeft, ChevronsRight, Loader2 } from 'lucide-react';\nimport Image from 'next/image';\n\n// --- Dynamic Imports for Code Splitting ---\nconst PointLoadCalculator = dynamic(() => import('./components/PointLoadCalculator'), { loading: () => <LoadingSpinner /> });\nconst SingleRackCalculator = dynamic(() => import('./components/SingleRackCalculator'), { loading: () => <LoadingSpinner /> });\nconst BackToBackRackCalculator = dynamic(() => import('./components/BackToBackRackCalculator'), { loading: () => <LoadingSpinner /> });\nconst WheelLoadCalculator = dynamic(() => import('./components/WheelLoadCalculator'), { loading: () => <LoadingSpinner /> });\n\nconst LoadingSpinner = () => (\n    <div className=\"flex justify-center items-center p-20\">\n        <Loader2 className=\"h-12 w-12 animate-spin text-indigo-600\" />\n    </div>\n);\n\n// --- Helper & Calculation Functions based on TM38 ---\n\n// Constants\nconst POISSON_RATIO = 0.15;\nconst LOAD_FACTOR = 1.5;\n\n// --- SOIL & SUBGRADE CALCULATIONS ---\n\nconst calculateKFromCBR = (cbr: number) => {\n    if (cbr <= 0) return 0;\n    if (cbr < 30) {\n        return 22.5 * Math.log(cbr) + 1.4305;\n    } else {\n        return 109.2 * Math.log(cbr) - 293.32;\n    }\n};\n\nconst calculateCBRFromScala = (scala: number) => {\n    if (scala <= 0) return 0;\n    return 318.15 * Math.pow(scala, -1.0788);\n};\n\nconst calculateModifiedK = (k_subgrade: number, subbase_thickness: number) => {\n    if (subbase_thickness <= 0) return k_subgrade;\n    if (k_subgrade <= 0) return 0;\n    const term1 = subbase_thickness * (0.0612 * Math.log(k_subgrade) - 0.1029);\n    const term2 = (0.8752 * k_subgrade) - 1.453;\n    return term1 + term2;\n};\n\n// --- CONCRETE & STRESS CALCULATIONS ---\n\nconst calculateEc = (fc: number) => fc > 0 ? 3320 * Math.sqrt(fc) + 6900 : 0;\n\n// k1 factor from TM38 for load application time\nconst getK1 = (days: number) => days >= 90 ? 1.1 : 1.0;\n\n// k2 factor from TM38 for load repetitions\nconst getK2 = (repetitionsStr: string) => {\n    const repetitions = parseFloat(repetitionsStr);\n\n    if (isNaN(repetitions) || repetitions < 8000) return 1.0;\n    if (repetitionsStr === 'Unlimited') return 0.75;\n    \n    if (repetitions >= 8000 && repetitions <= 400000) {\n        const k2_calculated = 1.5 * (0.73 - 0.0846 * (Math.log10(repetitions) - 3));\n        return Math.max(0.75, Math.min(1.0, k2_calculated));\n    }\n\n    if (repetitions > 400000) return 0.77; \n    return 1.0;\n};\n\n// Allowable stress for calculation check. Includes fatigue factor k2.\nconst calculateAllowableStress = (fc: number, days: number, repetitions: string, postTensionStress = 0) => {\n    if (!fc || fc <= 0) return 0;\n    const baseFr = 0.456 * getK1(days) * getK2(repetitions) * Math.pow(fc, 0.66);\n    return baseFr + parseFloat(postTensionStress.toString());\n};\n\n\nconst calculateL = (Ec: number, h: number, k: number) => {\n    if (!Ec || Ec <= 0 || !h || h <= 0 || !k || k <= 0) return 0;\n    const numerator = Ec * Math.pow(h, 3) * 1000;\n    const denominator = 12 * (1 - Math.pow(POISSON_RATIO, 2)) * k;\n    return Math.pow(numerator / denominator, 0.25);\n};\n\nconst calculateRForPointLoad = (shape: string, dim1: number, dim2: number) => {\n    if (shape === 'circular') return dim1 / 2;\n    return Math.sqrt(dim1 * dim2 / Math.PI);\n};\n\n\nconst calculateB = (r: number, h: number) => {\n    if (r === 0 || h === 0) return 0;\n    return r >= 1.72 * h ? r : Math.sqrt(1.6 * r * r + h * h) - 0.675 * h;\n};\n\n// Aligned with TM38 Worked Examples & original XLSM File\nconst calculateSingleInteriorStress = (P_tonnes: number, h: number, l: number, b: number) => {\n    if (h <= 0 || l <= 0 || b <= 0) return 0;\n    const P_N = P_tonnes * 9810;\n    const stress = (0.275 * (1 + POISSON_RATIO) * P_N / (h * h)) * Math.log(l / b); // Natural Log\n    return stress > 0 ? stress : 0;\n};\n\n// Aligned with TM38 Worked Examples & original XLSM File\nconst calculateSingleEdgeStress = (P_tonnes: number, h: number, l: number, b: number, jointType: string) => {\n    if (h <= 0 || l <= 0 || b <= 0) return 0;\n    const P_N = P_tonnes * 9810;\n    let stress = (0.529 * (1 + 0.54 * POISSON_RATIO) * P_N / (h * h)) * Math.log(l / b); // Natural Log\n    if (jointType !== 'No Load Transfer') stress *= 0.85;\n    return stress > 0 ? stress : 0;\n};\n\n// Aligned with TM38 Worked Examples & original XLSM File\nconst calculateSingleCornerStress = (P_tonnes: number, h: number, l: number, r: number, jointType: string) => {\n    if (h <= 0 || l <= 0 || r <= 0) return 0;\n    const P_N = P_tonnes * 9810;\n    let stress = (3 * P_N / (h * h)) * (1 - Math.pow((r * Math.sqrt(2) / l), 0.6));\n    if (jointType !== 'No Load Transfer') stress *= 0.7;\n    return stress > 0 ? stress : 0;\n};\n\n\n// --- Stress Distribution & Superposition ---\nconst interpolate = (points: number[][], x: number) => {\n    if (x <= points[0][0]) return points[0][1];\n    if (x >= points[points.length - 1][0]) return points[points.length - 1][1];\n    for (let i = 0; i < points.length - 1; i++) {\n        if (x >= points[i][0] && x <= points[i + 1][0]) {\n            const x1 = points[i][0], y1 = points[i][1];\n            const x2 = points[i + 1][0], y2 = points[i + 1][1];\n            return y1 + (y2 - y1) * (x - x1) / (x2 - x1);\n        }\n    }\n    return points[points.length - 1][1];\n};\n\nconst interiorRadialPoints = [[0,100], [0.5,60], [1,25], [1.5,5], [2,-5], [3,-8], [4,-5], [5,-2], [6,0]];\nconst interiorTangentialPoints = [[0,100], [0.5,80], [1,55], [1.5,35], [2,20], [3,8], [4,2], [5,0], [6,0]];\nconst edgeRadialPoints = [[0,100], [0.5,50], [1,20], [1.5,5], [2,-5], [3,-10], [4,-8], [5,-4], [6,0]];\n\nconst getStressContribution = (distOverL: number, baseStress: number, type: string) => {\n    let points;\n    if (type === 'interior-radial') points = interiorRadialPoints;\n    else if (type === 'interior-tangential') points = interiorTangentialPoints;\n    else if (type === 'edge-radial') points = edgeRadialPoints;\n    else return 0;\n    return baseStress * interpolate(points, distOverL) / 100;\n};\n\n// Calculates total stress, then applies load factor at the end.\nconst calculateTotalFactoredStress = (P_tonnes_unfactored: number, h: number, l: number, jointType: string, distances: any[], loadCase: string, r_contact: number) => {\n    const r_int = r_contact;\n    const r_edge = r_contact * Math.sqrt(2);\n    \n    let baseStress = 0;\n\n    if (loadCase.includes('edge')) {\n        const b_base = calculateB(r_edge, h);\n        baseStress = calculateSingleEdgeStress(P_tonnes_unfactored, h, l, b_base, jointType);\n    } else if (loadCase === 'corner') {\n        baseStress = calculateSingleCornerStress(P_tonnes_unfactored, h, l, r_int, jointType);\n    } else { // interior\n        const b_base = calculateB(r_int, h);\n        baseStress = calculateSingleInteriorStress(P_tonnes_unfactored, h, l, b_base);\n    }\n    \n    let totalUnfactoredStress = baseStress;\n\n    distances.forEach(d => {\n        if (d.dist > 0) {\n            const distOverL = d.dist / l;\n            let adjacentStress = 0;\n            let stressType = '';\n            \n            if (d.type === 'interior') {\n                const b_adj = calculateB(r_int, h);\n                adjacentStress = calculateSingleInteriorStress(P_tonnes_unfactored, h, l, b_adj);\n                stressType = 'interior-tangential'; \n            } else if (d.type.includes('edge')) {\n                const b_adj = calculateB(r_edge, h);\n                adjacentStress = calculateSingleEdgeStress(P_tonnes_unfactored, h, l, b_adj, jointType);\n                stressType = 'edge-radial';\n            }\n            totalUnfactoredStress += getStressContribution(distOverL, adjacentStress, stressType);\n        }\n    });\n\n    return totalUnfactoredStress * LOAD_FACTOR;\n};\n\n\nconst generateStressGraphData = (l: number, P_tonnes: number, h: number, b: number, r: number, jointType: string) => {\n    if (!l || l <= 0) return { internalData: [], edgeData: [] };\n    const sigma_i_base = calculateSingleInteriorStress(P_tonnes, h, l, b);\n    const sigma_e_base = calculateSingleEdgeStress(P_tonnes, h, l, b, jointType);\n    const internalData: any[] = [], edgeData: any[] = [];\n    const maxDist = 4 * l;\n    for (let d = 0; d <= maxDist; d += maxDist / 100) {\n        const distOverL = d / l;\n        internalData.push({ distance: d.toFixed(0), radial: getStressContribution(distOverL, sigma_i_base, 'interior-radial'), tangential: getStressContribution(distOverL, sigma_i_base, 'interior-tangential') });\n        edgeData.push({ distance: d.toFixed(0), radial: getStressContribution(distOverL, sigma_e_base, 'edge-radial')});\n    }\n    return { internalData, edgeData };\n};\n\n// Universal iterative function to find minimum thickness\nconst findMinThickness = (loadCase: string, allowableStress: number, Ec: number, k: number, P_tonnes_unfactored: number, jointType: string, distances: any[], r_contact: number) => {\n    let h = 100; // Start thickness at 100mm minimum\n    while (h <= 800) {\n        const l = calculateL(Ec, h, k);\n        const factoredStress = calculateTotalFactoredStress(P_tonnes_unfactored, h, l, jointType, distances, loadCase, r_contact);\n        \n        if (factoredStress <= allowableStress) {\n            return { thickness: h, stress: factoredStress };\n        }\n        h++;\n    }\n    return { thickness: '>800', stress: null };\n};\n\n\n// --- UI Components ---\nconst NavButton = ({ onClick, children }: {onClick: any, children: React.ReactNode}) => (<button onClick={onClick} className=\"w-full flex justify-between items-center bg-indigo-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-indigo-700 transition duration-300\">{children} <ChevronsRight /></button>);\nconst ReturnButton = ({ onClick }: {onClick: any}) => (<button onClick={onClick} className=\"flex items-center bg-gray-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-gray-700 transition duration-300\"><ArrowLeft className=\"mr-2\" /> Return to Input Parameters</button>);\nconst CustomTooltip = ({ active, payload, label }: any) => { if (active && payload && payload.length) { return (<div className=\"p-2 bg-gray-700 text-white rounded-md border border-gray-600 text-sm\"><p className=\"label\">{`Distance : ${label} mm`}</p>{payload.map((p: any, i: number) => ( <p key={i} style={{ color: p.color }}>{`${p.name} : ${p.value.toFixed(2)} MPa`}</p> ))}</div>); } return null; };\nconst StressChart = ({ data, title, lines }: {data: any, title: string, lines: any[]}) => ( <div className=\"w-full h-64 mt-4\"><h3 className=\"text-lg font-semibold text-center text-gray-700\">{title}</h3><ResponsiveContainer><LineChart data={data} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}><CartesianGrid strokeDasharray=\"3 3\" /><XAxis dataKey=\"distance\" label={{ value: 'Distance from load (mm)', position: 'insideBottom', offset: -5 }} /><YAxis label={{ value: 'Stress (MPa)', angle: -90, position: 'insideLeft' }} domain={['auto', 'auto']} /><Tooltip content={<CustomTooltip />} /><Legend />{lines.map(line => (<Line key={line.dataKey} type=\"monotone\" dataKey={line.dataKey} name={line.name} stroke={line.color} strokeWidth={2} dot={false} />))}</LineChart></ResponsiveContainer></div>);\n\nconst SharedParametersDisplay = ({ sharedInputs }: {sharedInputs: any}) => (\n    <div className=\"bg-gray-50 p-4 rounded-lg shadow-inner border border-gray-200 mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Calculation Parameters</h3>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 text-sm\">\n            <div className=\"bg-white p-2 rounded shadow-sm\"><strong>Sub-grade Modulus (k'):</strong><br/> {sharedInputs.finalModulus} MN/m³</div>\n            <div className=\"bg-white p-2 rounded shadow-sm\"><strong>Concrete Strength (fc'):</strong><br/> {sharedInputs.compressiveStrength} MPa</div>\n            <div className=\"bg-white p-2 rounded shadow-sm\"><strong>Load Applied at:</strong><br/> {sharedInputs.loadApplicationTime} Days</div>\n            <div className=\"bg-white p-2 rounded shadow-sm\"><strong>Joint Type:</strong><br/> {sharedInputs.jointType}</div>\n            <div className=\"bg-white p-2 rounded shadow-sm\"><strong>Post-Tension Stress:</strong><br/> {sharedInputs.postTensionStress} MPa</div>\n        </div>\n    </div>\n);\n\n// --- Page Components ---\n\nconst InputParameters = ({ sharedInputs, setSharedInputs, setPage }: {sharedInputs: any, setSharedInputs: any, setPage: any}) => {\n    const handleInputChange = (e: any) => {\n        const { name, value, type, checked } = e.target;\n        setSharedInputs((prev: any) => ({...prev, [name]: type === 'checkbox' ? checked : value }));\n    };\n\n    useEffect(() => {\n        let cbr = 0;\n        if (sharedInputs.stiffnessMethod === 'CBR') {\n            cbr = parseFloat(sharedInputs.cbrValue);\n        } else {\n            cbr = calculateCBRFromScala(parseFloat(sharedInputs.scalaValue));\n        }\n        \n        if (!isNaN(cbr) && cbr > 0) {\n            const k_subgrade = calculateKFromCBR(cbr);\n            let finalModulus = k_subgrade;\n            \n            if(sharedInputs.useSubbase) {\n                const k_modified = calculateModifiedK(k_subgrade, parseFloat(sharedInputs.subbaseThickness));\n                 if (!isNaN(k_modified)) {\n                    finalModulus = k_modified;\n                }\n            }\n            setSharedInputs((prevInputs: any) => ({\n                ...prevInputs,\n                subgradeModulus: k_subgrade.toFixed(2),\n                finalModulus: finalModulus.toFixed(2)\n            }));\n        }\n    }, [sharedInputs.stiffnessMethod, sharedInputs.cbrValue, sharedInputs.scalaValue, sharedInputs.useSubbase, sharedInputs.subbaseThickness, setSharedInputs]);\n\n\n    return (\n      <div className=\"p-6 grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <div className=\"space-y-6\">\n                 <div className=\"bg-white p-6 rounded-lg shadow\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800\">Soil Properties</h3>\n                    <div className=\"space-y-4\">\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Stiffness estimated using:</span>\n                            <select name=\"stiffnessMethod\" value={sharedInputs.stiffnessMethod} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\">\n                                <option value=\"CBR\">CBR</option>\n                                <option value=\"Scala\">Scala Penetrometer</option>\n                            </select>\n                        </label>\n                        {sharedInputs.stiffnessMethod === 'CBR' ? (\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">CBR Results (%)</span><input type=\"number\" name=\"cbrValue\" value={sharedInputs.cbrValue} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        ) : (\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">Scala Penetrometer Results (mm per blow)</span><input type=\"number\" name=\"scalaValue\" value={sharedInputs.scalaValue} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        )}\n                         <div className=\"bg-gray-100 p-2 rounded\">Sub-grade Modulus: <span className=\"font-bold\">{sharedInputs.subgradeModulus} MN/m³</span></div>\n                         <label className=\"flex items-center space-x-2\">\n                            <input type=\"checkbox\" name=\"useSubbase\" checked={sharedInputs.useSubbase} onChange={handleInputChange} className=\"rounded border-gray-300 text-indigo-600 shadow-sm focus:border-indigo-300 focus:ring focus:ring-offset-0 focus:ring-indigo-200 focus:ring-opacity-50\" />\n                            <span className=\"text-gray-700\">Modify Sub-grade Modulus with Granular Subbase</span>\n                        </label>\n                        {sharedInputs.useSubbase && (\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">Thickness of Granular Subbase (mm)</span><input type=\"number\" name=\"subbaseThickness\" value={sharedInputs.subbaseThickness} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        )}\n                        <div className=\"bg-green-100 p-3 rounded border border-green-200\">Final Modified Sub-grade Modulus (k'): <span className=\"font-bold text-xl text-green-800\">{sharedInputs.finalModulus} MN/m³</span></div>\n                    </div>\n                </div>\n                 <div className=\"bg-white p-6 rounded-lg shadow\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800\">Concrete & Joint Properties</h3>\n                     <div className=\"space-y-4\">\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">28 Day Compressive Strength (MPa)</span><input type=\"number\" name=\"compressiveStrength\" value={sharedInputs.compressiveStrength} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        \n                        <div>\n                            <span className=\"text-gray-700 font-medium\">Full Design Load Applied at</span>\n                            <div className=\"mt-2 flex rounded-md shadow-sm\">\n                                <button type=\"button\" onClick={() => handleInputChange({ target: { name: 'loadApplicationTime', value: 28 } })} className={`relative inline-flex items-center px-4 py-2 rounded-l-md border border-gray-300 text-sm font-medium ${sharedInputs.loadApplicationTime == 28 ? 'bg-indigo-600 text-white z-10' : 'bg-white text-gray-700 hover:bg-gray-50'}`}>28 Days</button>\n                                <button type=\"button\" onClick={() => handleInputChange({ target: { name: 'loadApplicationTime', value: 90 } })} className={`-ml-px relative inline-flex items-center px-4 py-2 rounded-r-md border border-gray-300 text-sm font-medium ${sharedInputs.loadApplicationTime == 90 ? 'bg-indigo-600 text-white z-10' : 'bg-white text-gray-700 hover:bg-gray-50'}`}>90 Days</button>\n                            </div>\n                        </div>\n\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Joint Detail</span>\n                            <select name=\"jointType\" value={sharedInputs.jointType} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\">\n                                <option>Dowel Joints</option><option>Tied Joints</option><option>No Load Transfer</option>\n                            </select>\n                        </label>\n                         <label className=\"block\"><span className=\"text-gray-700 font-medium\">Residual Post-Tension Stress (MPa)</span><input type=\"number\" name=\"postTensionStress\" value={sharedInputs.postTensionStress} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                    </div>\n                 </div>\n            </div>\n\n             <div className=\"bg-white p-6 rounded-lg shadow\">\n                <h3 className=\"text-xl font-bold mb-4 text-gray-800\">Select Calculator</h3>\n                 <div className=\"space-y-3\">\n                    <NavButton onClick={() => setPage('point')}>Point Loading</NavButton>\n                    <NavButton onClick={() => setPage('singleRack')}>Rack Loads - Single Line</NavButton>\n                    <NavButton onClick={() => setPage('backToBackRack')}>Rack Loads - Back-to-Back</NavButton>\n                    <NavButton onClick={() => setPage('wheel')}>Wheel Loads</NavButton>\n                </div>\n            </div>\n      </div>\n    );\n};\n\n\nconst PointLoadCalculator = ({ sharedInputs, setPage }: {sharedInputs: any, setPage: any}) => {\n    const [inputs, setInputs] = useState({ appliedLoad: 200, loadedShape: 'circular', dim1: 125, dim2: 125, slabThickness: 200 });\n    const [outputs, setOutputs] = useState<any>(null);\n    const handleInputChange = (e: any) => { const { name, value } = e.target; setInputs(prev => ({ ...prev, [name]: value })); };\n    \n    const isFormValid = useMemo(() => {\n        const fieldsToValidate: {[key: string]: any} = {\n            appliedLoad: inputs.appliedLoad,\n            slabThickness: inputs.slabThickness,\n            dim1: inputs.dim1,\n        };\n        if (inputs.loadedShape === 'rectangular') {\n            fieldsToValidate.dim2 = inputs.dim2;\n        }\n        return Object.values(fieldsToValidate).every(\n            val => val !== '' && !isNaN(parseFloat(val)) && parseFloat(val) > 0\n        );\n    }, [inputs]);\n\n    const handleCalculate = () => {\n        if (!isFormValid) return;\n        const { appliedLoad, loadedShape, dim1, dim2, slabThickness } = inputs;\n        const { finalModulus, compressiveStrength, loadApplicationTime, jointType, postTensionStress } = sharedInputs;\n        const P_tonnes = (parseFloat(appliedLoad) / 9.81);\n        const h = parseFloat(slabThickness); const fc = parseFloat(compressiveStrength); const k = parseFloat(finalModulus); const days = parseInt(loadApplicationTime);\n        const Ec = calculateEc(fc);\n        const fr = calculateAllowableStress(fc, days, '<8000', postTensionStress);\n        const l = calculateL(Ec, h, k);\n        const r_interior = calculateRForPointLoad(loadedShape, parseFloat(dim1), parseFloat(dim2));\n        const b_interior = calculateB(r_interior, h);\n        const r_edge = Math.sqrt(2 * Math.PI * r_interior * r_interior / Math.PI);\n        const b_edge = calculateB(r_edge, h);\n        const sigma_i = calculateSingleInteriorStress(P_tonnes, h, l, b_interior) * LOAD_FACTOR;\n        const sigma_e = calculateSingleEdgeStress(P_tonnes, h, l, b_edge, jointType) * LOAD_FACTOR;\n        const sigma_c = calculateSingleCornerStress(P_tonnes, h, l, r_interior, jointType) * LOAD_FACTOR;\n        const { internalData, edgeData } = generateStressGraphData(l, P_tonnes, h, b_interior, r_interior, jointType);\n        setOutputs({ fr, sigma_i, sigma_e, sigma_c, internalData, edgeData });\n    };\n\n     return (\n        <div className=\"p-4 md:p-6\">\n            <div className=\"mb-6\"><ReturnButton onClick={() => setPage('inputs')} /></div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                 <div className=\"bg-yellow-50 p-6 rounded-lg shadow-md border border-yellow-200\">\n                    <h2 className=\"text-2xl font-bold mb-4 text-gray-800 border-b pb-2\">Inputs: Point Loading</h2>\n                    <div className=\"space-y-4\">\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Unfactored Applied Loading (kN)</span><input type=\"number\" name=\"appliedLoad\" value={inputs.appliedLoad} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Loaded Shape</span>\n                            <select name=\"loadedShape\" value={inputs.loadedShape} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\">\n                                <option value=\"circular\">Circular Pad</option><option value=\"square\">Square Pad</option><option value=\"rectangular\">Rectangular Pad</option>\n                            </select>\n                        </label>\n                        {inputs.loadedShape === 'circular' && (<label className=\"block\"><span className=\"text-gray-700 font-medium\">Diameter (mm)</span><input type=\"number\" name=\"dim1\" value={inputs.dim1} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>)}\n                        {inputs.loadedShape === 'square' && (<label className=\"block\"><span className=\"text-gray-700 font-medium\">Side Length (mm)</span><input type=\"number\" name=\"dim1\" value={inputs.dim1} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>)}\n                        {inputs.loadedShape === 'rectangular' && (<div className=\"flex space-x-2\"><label className=\"block w-1/2\"><span className=\"text-gray-700 font-medium\">Width (mm)</span><input type=\"number\" name=\"dim1\" value={inputs.dim1} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label><label className=\"block w-1/2\"><span className=\"text-gray-700 font-medium\">Length (mm)</span><input type=\"number\" name=\"dim2\" value={inputs.dim2} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label></div>)}\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Slab Thickness (mm)</span><input type=\"number\" name=\"slabThickness\" value={inputs.slabThickness} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                     </div>\n                    <button onClick={handleCalculate} disabled={!isFormValid} className=\"mt-6 w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 disabled:bg-gray-400\">Calculate Stresses</button>\n                    {!isFormValid && <p className=\"text-sm text-red-600 mt-2\">Please fill all fields with valid numbers greater than zero.</p>}\n                 </div>\n                 <div className=\"bg-blue-50 p-6 rounded-lg shadow-md border border-blue-200\">\n                    <h2 className=\"text-2xl font-bold mb-4 text-gray-800 border-b pb-2\">Outputs</h2>\n                    {outputs ? (\n                        <div>\n                            <div className=\"grid grid-cols-2 gap-4 mb-4 text-center\">\n                                <div className=\"bg-white p-3 rounded-lg shadow\"><p className=\"text-sm text-gray-600\">Allowable Stress (fr)</p><p className=\"text-xl font-bold text-green-600\">{outputs.fr.toFixed(2)} MPa</p></div>\n                                <div className=\"bg-white p-3 rounded-lg shadow\"><p className=\"text-sm text-gray-600\">Load Factor</p><p className=\"text-xl font-bold text-gray-700\">{LOAD_FACTOR}</p></div>\n                            </div>\n                            <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">Factored Stresses</h3>\n                            <div className=\"space-y-2\">\n                                {[{ name: 'Interior', value: outputs.sigma_i }, { name: 'Edge', value: outputs.sigma_e }, { name: 'Corner', value: outputs.sigma_c }].map(stress => (<div key={stress.name} className={`flex justify-between items-center p-3 rounded-lg ${stress.value > outputs.fr ? 'bg-red-100' : 'bg-green-100'}`}><span className=\"font-medium text-gray-800\">{stress.name} Stress:</span><div className=\"flex items-center gap-2\"><span className={`font-bold text-lg ${stress.value > outputs.fr ? 'text-red-600' : 'text-green-700'}`}>{stress.value.toFixed(2)} MPa</span>{stress.value > outputs.fr && <AlertTriangle className=\"text-red-500\" size={20} />}</div></div>))}\n                            </div>\n                            <div className=\"mt-6\">\n                                <StressChart data={outputs.internalData} title=\"Internal Stress Distribution\" lines={[{ dataKey: 'radial', name: 'Radial Stress', color: '#ff0000' }, { dataKey: 'tangential', name: 'Tangential Stress', color: '#000000' }]} />\n                                <StressChart data={outputs.edgeData} title=\"Edge Stress Distribution\" lines={[{ dataKey: 'radial', name: 'Radial Stress', color: '#ff0000' }]} />\n                            </div>\n                        </div>\n                    ) : (<div className=\"text-center text-gray-500 mt-10\"><HelpCircle className=\"mx-auto h-12 w-12 text-gray-400\" /><p className=\"mt-2\">Enter input values and click \"Calculate\" to see the results.</p></div>)}\n                 </div>\n            </div>\n        </div>\n    );\n};\n\nconst ResultCard = ({ title, thickness, ultimateStrength, factoredStress, isLoading, isCritical, imgSrc }: {title: string, thickness: any, ultimateStrength: any, factoredStress: any, isLoading: boolean, isCritical: boolean, imgSrc?: string}) => ( <div className={`bg-white p-4 rounded-lg shadow-md border ${isCritical ? 'border-red-500 border-2' : 'border-gray-200'}`}><h4 className=\"font-bold text-gray-700 text-center mb-2\">{title}</h4> {imgSrc && <Image src={imgSrc} alt={title} className=\"mx-auto h-16 mb-2 object-contain\" width={64} height={64} data-ai-hint=\"technical drawing\" />} {isLoading ? (<div className=\"flex justify-center items-center h-24\"><Loader2 className=\"animate-spin h-8 w-8 text-indigo-600\" /></div>) : thickness ? (<div className=\"text-center space-y-1\"><div><p className=\"text-xs text-gray-500\">Slab Thickness</p><p className=\"font-bold text-2xl text-indigo-600\">{thickness} <span className=\"text-sm\">mm</span></p></div><div><p className=\"text-xs text-gray-500\">Ultimate Strength</p><p className=\"font-semibold text-gray-600\">{ultimateStrength} <span className=\"text-xs\">MPa</span></p></div><div><p className=\"text-xs text-gray-500\">Factored Stress</p><p className=\"font-semibold text-gray-600\">{factoredStress} <span className=\"text-xs\">MPa</span></p></div></div>) : (<div className=\"text-center text-gray-500 pt-8 pb-4\"><p className=\"text-sm\">Run calculation</p></div>)}</div>);\n\nconst SingleRackCalculator = ({ sharedInputs, setPage }: {sharedInputs: any, setPage: any}) => {\n    const [inputs, setInputs] = useState({ x: 800, y: 2700, p: 60, basePlate_a: 125, basePlate_b: 125, loadCycles: '< 8000'});\n    const [outputs, setOutputs] = useState<any>({});\n    const [isLoading, setIsLoading] = useState(false);\n    const handleInputChange = (e: any) => { const { name, value } = e.target; setInputs(prev => ({ ...prev, [name]: value }));};\n\n    const handleCalculateThickness = async () => {\n        setIsLoading(true);\n        setOutputs({});\n        const { compressiveStrength, loadApplicationTime, postTensionStress, finalModulus, jointType } = sharedInputs;\n        const { p, loadCycles, basePlate_a, basePlate_b, x, y } = inputs;\n        const fc = parseFloat(compressiveStrength); const k = parseFloat(finalModulus); \n        const P_tonnes_unfactored = (parseFloat(p) / 9.81);\n        const designStrength = calculateAllowableStress(fc, parseInt(loadApplicationTime), loadCycles, postTensionStress);\n        const Ec = calculateEc(fc);\n        const r_contact = calculateRForPointLoad('rectangular', parseFloat(basePlate_a), parseFloat(basePlate_b));\n        \n        const singleRackDistances = {\n            interior: [{ dist: parseFloat(x), type: 'interior' }, { dist: parseFloat(y), type: 'interior' },{ dist: parseFloat(y), type: 'interior' }],\n            edge: [{ dist: parseFloat(y), type: 'edge' }, { dist: parseFloat(y), type: 'edge' }],\n            corner: [{ dist: parseFloat(x), type: 'edge' }, { dist: parseFloat(y), type: 'edge' }, { dist: Math.sqrt(x*x + y*y), type: 'interior'}],\n        };\n\n        setTimeout(() => {\n            const commonArgs: [number, number, number, number, string] = [designStrength, Ec, k, P_tonnes_unfactored, jointType];\n            const interiorResult = findMinThickness('interior', ...commonArgs, singleRackDistances.interior, r_contact);\n            setOutputs((prev: any) => ({ ...prev, interior: { ...interiorResult, ultimateStrength: designStrength } }));\n            const edgeResult = findMinThickness('edge', ...commonArgs, singleRackDistances.edge, r_contact);\n             setOutputs((prev: any) => ({ ...prev, edge: { ...edgeResult, ultimateStrength: designStrength } }));\n            const cornerResult = findMinThickness('corner', ...commonArgs, singleRackDistances.corner, r_contact);\n            setOutputs((prev: any) => ({ ...prev, corner: { ...cornerResult, ultimateStrength: designStrength } }));\n            setIsLoading(false);\n        }, 100);\n    };\n    \n    const criticalLoadCase = useMemo(() => {\n        const results = Object.entries(outputs).filter(([_, val]) => val && (val as any).thickness);\n        if (results.length === 0) return null;\n        let maxThickness = 0; \n        let criticalCaseName = null;\n        results.forEach(([key, val]) => { \n            const thickness = parseFloat((val as any).thickness); \n            if (!isNaN(thickness) && thickness > maxThickness) { \n                maxThickness = thickness; \n                criticalCaseName = key; \n            } \n        });\n        return criticalCaseName;\n    }, [outputs]);\n\n    return (\n        <div className=\"p-4 md:p-6\">\n             <div className=\"mb-6\"><ReturnButton onClick={() => setPage('inputs')} /></div>\n            <h2 className=\"text-3xl font-bold mb-6 text-gray-800 text-center\">Rack Loads - Single Line of Racks</h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 items-start\">\n                <div className=\"lg:col-span-1\">\n                    <div className=\"bg-white p-4 rounded-lg shadow-md flex justify-center items-center border mb-4\">\n                        <Image src=\"/single-rack.svg\" alt=\"Single Line Rack Layout\" className=\"max-w-full h-auto\" width={300} height={150} data-ai-hint=\"rack layout\" />\n                    </div>\n                    <div className=\"bg-yellow-50 p-6 rounded-lg shadow-md border border-yellow-200\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Inputs</h3>\n                    <div className=\"space-y-4\">\n                        <div className=\"grid grid-cols-2 gap-2\"><label className=\"block\"><span className=\"text-gray-700 font-medium\">x (mm)</span><input type=\"number\" name=\"x\" value={inputs.x} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label><label className=\"block\"><span className=\"text-gray-700 font-medium\">y (mm)</span><input type=\"number\" name=\"y\" value={inputs.y} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label></div>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Unfactored Foot Load (P) (kN)</span><input type=\"number\" name=\"p\" value={inputs.p} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <div className=\"grid grid-cols-2 gap-2\"><label className=\"block\"><span className=\"text-gray-700 font-medium\">Base Plate a (mm)</span><input type=\"number\" name=\"basePlate_a\" value={inputs.basePlate_a} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label><label className=\"block\"><span className=\"text-gray-700 font-medium\">Base Plate b (mm)</span><input type=\"number\" name=\"basePlate_b\" value={inputs.basePlate_b} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label></div>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">No. of Load Cycles</span><select name=\"loadCycles\" value={inputs.loadCycles} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"><option>&lt; 8000</option><option>10000</option><option>30000</option><option>50000</option><option>100000</option><option>200000</option><option>300000</option><option>400000</option></select></label>\n                    </div>\n                     <button onClick={handleCalculateThickness} disabled={isLoading} className=\"mt-6 w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 disabled:bg-gray-400 flex items-center justify-center\">{isLoading && <Loader2 className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" />}{isLoading ? 'Calculating...' : 'Calculate Thickness'}</button>\n                    </div>\n                </div>\n                <div className=\"lg:col-span-2 space-y-6\">\n                    <div className=\"bg-blue-50 p-6 rounded-lg shadow-md border border-blue-200\">\n                         <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Outputs</h3>\n                         <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n                             <ResultCard title=\"Interior\" isLoading={isLoading} thickness={outputs.interior?.thickness} ultimateStrength={outputs.interior?.ultimateStrength?.toFixed(2)} factoredStress={outputs.interior?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'interior'} />\n                            <ResultCard title=\"Edge\" isLoading={isLoading} thickness={outputs.edge?.thickness} ultimateStrength={outputs.edge?.ultimateStrength?.toFixed(2)} factoredStress={outputs.edge?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'edge'} />\n                            <ResultCard title=\"Corner\" isLoading={isLoading} thickness={outputs.corner?.thickness} ultimateStrength={outputs.corner?.ultimateStrength?.toFixed(2)} factoredStress={outputs.corner?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'corner'} />\n                         </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst BackToBackRackCalculator = ({ sharedInputs, setPage }: {sharedInputs: any, setPage: any}) => {\n     const [inputs, setInputs] = useState({ x: 800, y: 2700, z: 500, p: 60, basePlate_a: 125, basePlate_b: 125, loadCycles: '< 8000'});\n    const [outputs, setOutputs] = useState<any>({});\n    const [isLoading, setIsLoading] = useState(false);\n    const handleInputChange = (e: any) => { const { name, value } = e.target; setInputs(prev => ({ ...prev, [name]: value }));};\n    \n    const handleCalculateThickness = async () => {\n        setIsLoading(true);\n        setOutputs({});\n        const { compressiveStrength, loadApplicationTime, postTensionStress, finalModulus, jointType } = sharedInputs;\n        const { x, y, z, p, basePlate_a, basePlate_b, loadCycles } = inputs;\n        \n        const fc = parseFloat(compressiveStrength); const k = parseFloat(finalModulus); \n        const P_tonnes_unfactored = (parseFloat(p) / 9.81);\n        const designStrength = calculateAllowableStress(fc, parseInt(loadApplicationTime), loadCycles, postTensionStress);\n        const Ec = calculateEc(fc);\n        const r_contact = calculateRForPointLoad('rectangular', parseFloat(basePlate_a), parseFloat(basePlate_b));\n\n        const dist_z_center = parseFloat(z) + parseFloat(basePlate_a);\n\n        const distances = {\n            interior: [ { dist: parseFloat(x), type: 'interior' }, { dist: parseFloat(y), type: 'interior' }, { dist: parseFloat(y), type: 'interior' }, { dist: dist_z_center, type: 'interior' } ],\n            edgeLong: [ { dist: parseFloat(y), type: 'edgeLong' }, { dist: parseFloat(y), type: 'edgeLong' }, { dist: parseFloat(x), type: 'interior' } ],\n            edgeShort: [ { dist: parseFloat(x), type: 'edgeShort' }, { dist: dist_z_center, type: 'edgeShort' }, { dist: parseFloat(y), type: 'interior' } ],\n            corner: [ { dist: parseFloat(x), type: 'edgeShort' }, { dist: parseFloat(y), type: 'edgeLong' }, { dist: Math.sqrt(parseFloat(x)*parseFloat(x) + parseFloat(y)*parseFloat(y)), type: 'interior' }, ]\n        };\n\n        setTimeout(() => {\n            const commonArgs: [number, number, number, number, string] = [designStrength, Ec, k, P_tonnes_unfactored, jointType];\n            const interiorResult = findMinThickness('interior', ...commonArgs, distances.interior, r_contact);\n            setOutputs((prev: any) => ({ ...prev, interior: { ...interiorResult, ultimateStrength: designStrength } }));\n            \n            const edgeLongResult = findMinThickness('edgeLong', ...commonArgs, distances.edgeLong, r_contact);\n            setOutputs((prev: any) => ({ ...prev, edgeLong: { ...edgeLongResult, ultimateStrength: designStrength } }));\n            \n            const edgeShortResult = findMinThickness('edgeShort', ...commonArgs, distances.edgeShort, r_contact);\n            setOutputs((prev: any) => ({ ...prev, edgeShort: { ...edgeShortResult, ultimateStrength: designStrength } }));\n            \n            const cornerResult = findMinThickness('corner', ...commonArgs, distances.corner, r_contact);\n            setOutputs((prev: any) => ({ ...prev, corner: { ...cornerResult, ultimateStrength: designStrength } }));\n            \n            setIsLoading(false);\n        }, 100);\n    };\n\n    const criticalLoadCase = useMemo(() => {\n        const results = Object.entries(outputs).filter(([_, val]) => val && (val as any).thickness);\n        if (results.length === 0) return null;\n        let maxThickness = 0;\n        let criticalCaseName = null;\n        results.forEach(([key, val]) => { \n            const thickness = parseFloat((val as any).thickness); \n            if (!isNaN(thickness) && thickness > maxThickness) { \n                maxThickness = thickness; \n                criticalCaseName = key; \n            }\n        });\n        return criticalCaseName;\n    }, [outputs]);\n\n\n    return (\n        <div className=\"p-4 md:p-6\">\n            <div className=\"mb-6\"><ReturnButton onClick={() => setPage('inputs')} /></div>\n            <h2 className=\"text-3xl font-bold mb-6 text-gray-800 text-center\">Rack Loads - Back-to-Back Racks</h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 items-start\">\n                <div className=\"lg:col-span-1 bg-yellow-50 p-6 rounded-lg shadow-md border border-yellow-200\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Inputs</h3>\n                    <div className=\"space-y-4\">\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Short Leg Spacing (x) (mm)</span><input type=\"number\" name=\"x\" value={inputs.x} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Long Leg Spacing (y) (mm)</span><input type=\"number\" name=\"y\" value={inputs.y} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Clear spacing between legs (z) (mm)</span><input type=\"number\" name=\"z\" value={inputs.z} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">Unfactored Foot Load (P) (kN)</span><input type=\"number\" name=\"p\" value={inputs.p} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label>\n                        <div className=\"grid grid-cols-2 gap-2\"><label className=\"block\"><span className=\"text-gray-700 font-medium\">Base Plate a (mm)</span><input type=\"number\" name=\"basePlate_a\" value={inputs.basePlate_a} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label><label className=\"block\"><span className=\"text-gray-700 font-medium\">Base Plate b (mm)</span><input type=\"number\" name=\"basePlate_b\" value={inputs.basePlate_b} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\" /></label></div>\n                        <label className=\"block\"><span className=\"text-gray-700 font-medium\">No. of Load Cycles</span><select name=\"loadCycles\" value={inputs.loadCycles} onChange={handleInputChange} className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm\"><option>&lt; 8000</option><option>10000</option><option>30000</option><option>50000</option><option>100000</option><option>200000</option><option>300000</option><option>400000</option></select></label>\n                    </div>\n                    <button onClick={handleCalculateThickness} disabled={isLoading} className=\"mt-6 w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 transition duration-300 disabled:bg-gray-400 flex items-center justify-center\">{isLoading && <Loader2 className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" />}{isLoading ? 'Calculating...' : 'Calculate Thickness'}</button>\n                </div>\n             <div className=\"lg:col-span-2 space-y-6\">\n                 <div className=\"bg-white p-4 rounded-lg shadow-md flex justify-center items-center border\"><Image src=\"/backtoback-rack.svg\" alt=\"Back-to-Back Rack Layout\" className=\"max-w-xs\" width={300} height={200} data-ai-hint=\"rack layout\" /></div>\n                <div className=\"bg-blue-50 p-6 rounded-lg shadow-md border border-blue-200\">\n                         <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Outputs</h3>\n                         <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n                            <ResultCard title=\"Interior\" isLoading={isLoading} thickness={outputs.interior?.thickness} ultimateStrength={outputs.interior?.ultimateStrength?.toFixed(2)} factoredStress={outputs.interior?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'interior'} />\n                            <ResultCard title=\"Edge (Long)\" isLoading={isLoading} thickness={outputs.edgeLong?.thickness} ultimateStrength={outputs.edgeLong?.ultimateStrength?.toFixed(2)} factoredStress={outputs.edgeLong?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'edgeLong'} />\n                            <ResultCard title=\"Edge (Short)\" isLoading={isLoading} thickness={outputs.edgeShort?.thickness} ultimateStrength={outputs.edgeShort?.ultimateStrength?.toFixed(2)} factoredStress={outputs.edgeShort?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'edgeShort'} />\n                            <ResultCard title=\"Corner\" isLoading={isLoading} thickness={outputs.corner?.thickness} ultimateStrength={outputs.corner?.ultimateStrength?.toFixed(2)} factoredStress={outputs.corner?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'corner'} />\n                         </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nconst WheelLoadCalculator = ({ sharedInputs, setPage }: {sharedInputs: any, setPage: any}) => {\n    const [inputs, setInputs] = useState({ s: 2000, s_a: 700, tyrePressure: 700, axleLoad: 400, loadCycles: '< 8000', wheelType: 'single', tc: 300 });\n    const [outputs, setOutputs] = useState<any>({});\n    const [isLoading, setIsLoading] = useState(false);\n    const handleInputChange = (e: any) => { const { name, value } = e.target; setInputs(prev => ({ ...prev, [name]: value })); };\n\n    const handleCalculateThickness = async () => {\n        setIsLoading(true);\n        setOutputs({});\n        const { compressiveStrength, loadApplicationTime, postTensionStress, subgradeModulus, jointType } = sharedInputs;\n        const { s, axleLoad, tyrePressure, loadCycles, wheelType, tc } = inputs;\n\n        const fc = parseFloat(compressiveStrength);\n        const k = parseFloat(subgradeModulus); // Use subgrade modulus directly for wheel loads\n        const designStrength = calculateAllowableStress(fc, parseInt(loadApplicationTime), loadCycles, postTensionStress);\n        const Ec = calculateEc(fc);\n        \n        const P_wheel_kN = parseFloat(axleLoad) / 2;\n        const P_wheel_tonnes_unfactored = P_wheel_kN / 9.81;\n        const tyrePressure_MPa = parseFloat(tyrePressure) / 1000;\n        \n        let r_contact;\n\n        if (wheelType === 'dual') {\n            const P_tyre_N = P_wheel_kN * 1000 / 2;\n            const contactArea_tyre_mm2 = P_tyre_N / tyrePressure_MPa;\n            const r_tyre = Math.sqrt(contactArea_tyre_mm2 / Math.PI);\n            r_contact = Math.sqrt(Math.pow(r_tyre, 2) + (2 * parseFloat(tc) * r_tyre) / Math.PI);\n        } else {\n            const contactArea_mm2 = (P_wheel_kN * 1000) / tyrePressure_MPa;\n            r_contact = Math.sqrt(contactArea_mm2 / Math.PI);\n        }\n\n        const wheel_spacing = parseFloat(s);\n\n        const distances = {\n            interior: [{ dist: wheel_spacing, type: 'interior' }],\n            edgePerp: [{ dist: wheel_spacing, type: 'interior' }],\n            edgePara: [{ dist: wheel_spacing, type: 'edge' }],\n            corner: [{ dist: wheel_spacing, type: 'edge' }],\n        };\n\n        setTimeout(() => {\n            const commonArgs: [number, number, number, number, string] = [designStrength, Ec, k, P_wheel_tonnes_unfactored, jointType];\n            const interiorResult = findMinThickness('interior', ...commonArgs, distances.interior, r_contact);\n            setOutputs((prev: any) => ({ ...prev, interior: { ...interiorResult, ultimateStrength: designStrength } }));\n            \n            const edgePerpResult = findMinThickness('edge', ...commonArgs, distances.edgePerp, r_contact);\n            setOutputs((prev: any) => ({ ...prev, edgePerp: { ...edgePerpResult, ultimateStrength: designStrength } }));\n            \n            const edgeParaResult = findMinThickness('edge', ...commonArgs, distances.edgePara, r_contact);\n            setOutputs((prev: any) => ({ ...prev, edgePara: { ...edgeParaResult, ultimateStrength: designStrength } }));\n            \n            const cornerResult = findMinThickness('corner', ...commonArgs, distances.corner, r_contact);\n            setOutputs((prev: any) => ({ ...prev, corner: { ...cornerResult, ultimateStrength: designStrength } }));\n            \n            setIsLoading(false);\n        }, 100);\n    };\n    \n     const criticalLoadCase = useMemo(() => {\n        const results = Object.entries(outputs).filter(([_, val]) => val && (val as any).thickness);\n        if (results.length === 0) return null;\n        let maxThickness = 0; \n        let criticalCaseName = null;\n        results.forEach(([key, val]) => { \n            const thickness = parseFloat((val as any).thickness); \n            if (!isNaN(thickness) && thickness > maxThickness) { \n                maxThickness = thickness; \n                criticalCaseName = key; \n            }\n        });\n        return criticalCaseName;\n    }, [outputs]);\n\n    return (\n        <div className=\"p-4 md:p-6\">\n            <div className=\"mb-6\"><ReturnButton onClick={() => setPage('inputs')} /></div>\n            <h2 className=\"text-3xl font-bold mb-6 text-gray-800 text-center\">Wheel Loads - Single or Dual Wheeled</h2>\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 items-start\">\n                 <div className=\"bg-yellow-50 p-6 rounded-lg shadow-md border border-yellow-200\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Inputs</h3>\n                    <div className=\"flex flex-col md:flex-row gap-4\">\n                        <Image src=\"/wheel-loads.svg\" alt=\"Wheel Loads\" className=\"w-48 h-auto object-contain border bg-white p-2 rounded\" width={192} height={192} data-ai-hint=\"wheel load\" />\n                        <div className=\"flex-grow space-y-4\">\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">Wheel Type</span><select name=\"wheelType\" value={inputs.wheelType} onChange={handleInputChange} className=\"mt-1 block w-full\"><option value=\"single\">Single</option><option value=\"dual\">Dual</option></select></label>\n                            {inputs.wheelType === 'dual' && (<label className=\"block\"><span className=\"text-gray-700 font-medium\">TC = Dual Wheel Spacing (mm)</span><input type=\"number\" name=\"tc\" value={inputs.tc} onChange={handleInputChange} className=\"mt-1 block w-full\" /></label>)}\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">s = Wheel Spacing (mm)</span><input type=\"number\" name=\"s\" value={inputs.s} onChange={handleInputChange} className=\"mt-1 block w-full\" /></label>\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">sₐ = Axle Spacing (mm)</span><input type=\"number\" name=\"s_a\" value={inputs.s_a} onChange={handleInputChange} className=\"mt-1 block w-full\" /></label>\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">Tyre Pressure (kPa)</span><input type=\"number\" name=\"tyrePressure\" value={inputs.tyrePressure} onChange={handleInputChange} className=\"mt-1 block w-full\" /></label>\n                            <label className=\"block\"><span className=\"text-gray-700 font-medium\">Axle Load (kN)</span><input type=\"number\" name=\"axleLoad\" value={inputs.axleLoad} onChange={handleInputChange} className=\"mt-1 block w-full\" /></label>\n                             <label className=\"block\"><span className=\"text-gray-700 font-medium\">No. of Load Cycles</span><select name=\"loadCycles\" value={inputs.loadCycles} onChange={handleInputChange} className=\"mt-1 block w-full\"><option>&lt; 8000</option><option>10000</option><option>30000</option><option>50000</option><option>100000</option><option>200000</option><option>300000</option><option>400000</option></select></label>\n                        </div>\n                    </div>\n                     <button onClick={handleCalculateThickness} disabled={isLoading} className=\"mt-6 w-full bg-green-600 text-white font-bold py-3 px-4 rounded-lg hover:bg-green-700 disabled:bg-gray-400 flex items-center justify-center\">{isLoading && <Loader2 className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" />}{isLoading ? 'Calculating...' : 'Calculate Thickness'}</button>\n                </div>\n                 <div className=\"bg-blue-50 p-6 rounded-lg shadow-md border border-blue-200\">\n                    <h3 className=\"text-xl font-bold mb-4 text-gray-800 border-b pb-2\">Outputs</h3>\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\n                        <ResultCard title=\"Interior\" isLoading={isLoading} imgSrc=\"https://storage.googleapis.com/stedi-studio-app-assets/user/clvxw4k0i0001mo08e3u9n27j/wheel-interior.png\" thickness={outputs.interior?.thickness} ultimateStrength={outputs.interior?.ultimateStrength?.toFixed(2)} factoredStress={outputs.interior?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'interior'} />\n                        <ResultCard title=\"Edge (Perpendicular)\" isLoading={isLoading} imgSrc=\"https://storage.googleapis.com/stedi-studio-app-assets/user/clvxw4k0i0001mo08e3u9n27j/wheel-edge-perp.png\" thickness={outputs.edgePerp?.thickness} ultimateStrength={outputs.edgePerp?.ultimateStrength?.toFixed(2)} factoredStress={outputs.edgePerp?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'edgePerp'} />\n                        <ResultCard title=\"Edge (Parallel)\" isLoading={isLoading} imgSrc=\"https://storage.googleapis.com/stedi-studio-app-assets/user/clvxw4k0i0001mo08e3u9n27j/wheel-edge-para.png\" thickness={outputs.edgePara?.thickness} ultimateStrength={outputs.edgePara?.ultimateStrength?.toFixed(2)} factoredStress={outputs.edgePara?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'edgePara'} />\n                        <ResultCard title=\"Corner\" isLoading={isLoading} imgSrc=\"https://storage.googleapis.com/stedi-studio-app-assets/user/clvxw4k0i0001mo08e3u9n27j/wheel-corner.png\" thickness={outputs.corner?.thickness} ultimateStrength={outputs.corner?.ultimateStrength?.toFixed(2)} factoredStress={outputs.corner?.stress?.toFixed(2)} isCritical={criticalLoadCase === 'corner'} />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Main App Component\nexport default function App() {\n    const [page, setPage] = useState('inputs');\n    const [sharedInputs, setSharedInputs] = useState({ stiffnessMethod: 'CBR', cbrValue: 10, scalaValue: 10, subgradeModulus: '54.00', useSubbase: true, subbaseThickness: 150, finalModulus: '65.00', compressiveStrength: 35, loadApplicationTime: 90, jointType: 'Dowel Joints', postTensionStress: 0 });\n    const [isClient, setIsClient] = useState(false);\n    \n    useEffect(() => {\n        setIsClient(true);\n    }, []);\n\n    const renderPage = () => {\n        switch (page) {\n            case 'point': return <PointLoadCalculator sharedInputs={sharedInputs} setPage={setPage} />;\n            case 'singleRack': return <SingleRackCalculator sharedInputs={sharedInputs} setPage={setPage} />;\n            case 'backToBackRack': return <BackToBackRackCalculator sharedInputs={sharedInputs} setPage={setPage} />;\n            case 'wheel': return <WheelLoadCalculator sharedInputs={sharedInputs} setPage={setPage} />;\n            case 'inputs':\n            default:\n                return <InputParameters sharedInputs={sharedInputs} setSharedInputs={setSharedInputs} setPage={setPage} />;\n        }\n    };\n\n    return (\n        <div className=\"min-h-screen bg-gray-100 font-sans text-gray-900\">\n            <header className=\"bg-white shadow-md\"><div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\"><h1 className=\"text-3xl font-bold text-gray-800\">TM38 Concrete Slab on Ground Calculator</h1><p className=\"text-gray-600\">Design tool for point load calculations based on CCANZ TM38.</p></div></header>\n            <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"><div className=\"bg-white rounded-lg shadow-xl overflow-hidden\">{renderPage()}</div></main>\n            <header className=\"bg-white shadow-md\"><div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\"><h1 className=\"text-3xl font-bold text-gray-800\">TM38 Concrete Slab on Ground Calculator</h1><p className=\"text-gray-600\">Design tool for point load calculations based on CCANZ TM38.</p></div></header><main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\"><div className=\"bg-white rounded-lg shadow-xl overflow-hidden\">{isClient ? renderPage() : <LoadingSpinner />}</div></main>\n             <footer className=\"text-center py-4 text-sm text-gray-500\"><p>Disclaimer: This programme does not check for punching shear or bearing capacity. The designer must confirm that these comply with NZS3101.</p></footer>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}